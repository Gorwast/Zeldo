[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://dn28n3sx5t8tk"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_lerd3"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_bpelm"]
default_input_values = [0, 0.0, 1, 1.0, 2, -0.365, 3, Vector3(0.965, 0.792, 0.455), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vq61l"]
expanded_output_ports = [0]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_t5cia"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(20.085, 25)]
op_type = 0

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_77xsm"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(10, 0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ie2k3"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_pun4t"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_w386x"]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_agvdr"]
default_input_values = [0, 0.0, 1, 5.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ckeo0"]
default_input_values = [0, 0.0, 1, 1.0]
operator = 2

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void vertex() {
// Input:2
	vec2 n_out2p0 = VERTEX;
	float n_out2p2 = n_out2p0.g;


// Input:5
	float n_out5p0 = TIME;


// FloatOp:9
	float n_in9p1 = 1.00000;
	float n_out9p0 = n_out5p0 * n_in9p1;


// FloatFunc:7
	float n_out7p0 = sin(n_out9p0);


// FloatOp:8
	float n_in8p1 = 5.00000;
	float n_out8p0 = n_out7p0 * n_in8p1;


// VectorCompose:6
	float n_in6p1 = 0.00000;
	float n_in6p2 = 0.00000;
	vec3 n_out6p0 = vec3(n_out8p0, n_in6p1, n_in6p2);


	vec3 n_out4p0;
// If:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 0.00001;
	vec3 n_in4p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in4p4 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_in4p3;
	}
	else if(n_out2p2 < n_in4p1)
	{
		n_out4p0 = n_out6p0;
	}
	else
	{
		n_out4p0 = n_in4p4;
	}


// VectorOp:3
	vec2 n_out3p0 = n_out2p0 + vec2(n_out4p0.xy);


// Output:0
	VERTEX = n_out3p0;


}

void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


	vec3 n_out4p0;
// If:4
	float n_in4p1 = 1.00000;
	float n_in4p2 = -0.36500;
	vec3 n_in4p3 = vec3(0.96500, 0.79200, 0.45500);
	if(abs(n_out2p0.x - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_in4p3;
	}
	else if(n_out2p0.x < n_in4p1)
	{
		n_out4p0 = vec3(n_out2p0.xyz);
	}
	else
	{
		n_out4p0 = vec3(n_out2p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-175.008, -59.3732)
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_vq61l")
nodes/vertex/2/position = Vector2(-340, 180)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_t5cia")
nodes/vertex/3/position = Vector2(160, 160)
nodes/vertex/4/node = SubResource("VisualShaderNodeIf_77xsm")
nodes/vertex/4/position = Vector2(-40, 300)
nodes/vertex/5/node = SubResource("VisualShaderNodeInput_ie2k3")
nodes/vertex/5/position = Vector2(-1160, 500)
nodes/vertex/6/node = SubResource("VisualShaderNodeVectorCompose_pun4t")
nodes/vertex/6/position = Vector2(-260, 420)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatFunc_w386x")
nodes/vertex/7/position = Vector2(-680, 480)
nodes/vertex/8/node = SubResource("VisualShaderNodeFloatOp_agvdr")
nodes/vertex/8/position = Vector2(-460, 440)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_ckeo0")
nodes/vertex/9/position = Vector2(-900, 460)
nodes/vertex/connections = PackedInt32Array(3, 0, 0, 0, 2, 2, 4, 0, 2, 0, 3, 0, 4, 0, 3, 1, 6, 0, 4, 5, 7, 0, 8, 0, 5, 0, 9, 0, 9, 0, 7, 0, 8, 0, 6, 0)
nodes/fragment/0/position = Vector2(540, 80)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_lerd3")
nodes/fragment/2/position = Vector2(-820, 100)
nodes/fragment/4/node = SubResource("VisualShaderNodeIf_bpelm")
nodes/fragment/4/position = Vector2(-40, 100)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 4, 2, 0, 4, 5, 2, 0, 4, 0, 4, 0, 0, 0)
